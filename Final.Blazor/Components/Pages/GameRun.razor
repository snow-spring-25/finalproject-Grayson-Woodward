@page "/GameRun"
@using System.IO
@implements IDisposable
@rendermode InteractiveServer

<h1>Multiplayer Hangman</h1>

<div class="xcontainer">
    <div>
        @if (!joined)
        {
            <p>Enter your name to join:</p>
            <form @onsubmit="JoinGame">
            <input @bind="playerName" placeholder="Your name" />
            <button type="submit">Join</button>
            </form>
        }
        else if (!gameStarted)
        {
            <p>Waiting for players... (@game.PlayerScores.Count / 2)</p>
            @foreach (var name in game.PlayerScores.Keys)
            {
                <p>@name joined</p>
            }

            @if (game.PlayerScores.Count == 2)
            {
                <button @onclick="StartGame">Start Game</button>
            }
        }
        else
        {
            <h3>Game Started!</h3>
            <p>Category: @category</p>
            <p>Word: @game.CurrentMaskedWord</p>
            <p>Current Player: @game.CurrentPlayer</p>

            @if (game.CurrentPlayer == playerName)
            {
                <p>It's your turn! Play!</p>

                <form @onsubmit="OnLetterGuess">
                    <label for="guessLetter">Guess a letter:</label>
                    <input @bind="guessLetter" maxlength="1" placeholder="Guess a letter" />
                    <button type="submit">Guess</button>
                </form>
            }

            <p>Attempts Left: @game.AttemptsLeft</p>

            @if (game.GetIncorrectGuesses().Any())
            {
                <p><strong>Incorrect Guesses:</strong></p>
                <div>
                    @foreach (var incorrectGuess in game.GetIncorrectGuesses())
                    {
                        <span>@incorrectGuess </span>
                    }
                </div>
            }

            @if (!string.IsNullOrEmpty(game.GameResult))
            {
                <h2>@game.GameResult</h2>
                <button @onclick="PlayAgain">Play Again!</button>
            }

            @if (joined && gameStarted)
            {
                <div class="card my-3 p-3" style="max-width: 200px;">
                    <h5>Your Score</h5>
                    <p class="display-6">@game.GetPlayerScore(playerName)</p>
                </div>
            }
        }
    </div>

    <div>
        <img id="image" src="@imgPath" alt="Hangman Step" />
    </div>
</div>

@code {
    MultiplayerHangmanGame game = MultiplayerHangmanGame.Instance;
    private string playerName = "";
    private bool joined = false;
    private bool gameStarted = false;
    private string guessLetter = "";
    private string category = "Star Wars";

    private string imgPath => $"/step {game.AttemptsLeft}.png";

    private Action? gameStateHandler;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        gameStateHandler = () => InvokeAsync(StateHasChanged);
        game.OnGameStateChanged += gameStateHandler;
    }

    public void Dispose()
    {
        if (gameStateHandler is not null)
            game.OnGameStateChanged -= gameStateHandler;
    }

    private void JoinGame()
    {
        try
        {
            game.AddPlayer(playerName);
            joined = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error joining game: {ex.Message}");
        }
    }

    private void StartGame()
    {
        try
        {
            game.Start();
            gameStarted = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting game: {ex.Message}");
        }
    }

    private void OnLetterGuess()
    {
        if (string.IsNullOrEmpty(guessLetter) || guessLetter.Length != 1)
            return;

        char guessedChar = char.ToLower(guessLetter[0]);
        try
        {
            bool correctGuess = game.MakeGuess(guessedChar, playerName);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error making guess: {ex.Message}");
        }

        guessLetter = "";
    }
    
    private void PlayAgain()
    {
        game.Start();
    }
}

